#include <QCoreApplication>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp> //图像处理头文件
#include <cv.h>
#include <highgui.h>
#include <iostream>
using namespace cv;
using namespace std;
int element_size=3;
int max_size=21;


int t1_value=40;
int max_value=255;
void canny_demo(int,void*);

//根据三个点计算中间那个点的夹角   pt1 pt0 pt2
double getAngle(cv::Point pt1, cv::Point pt2, cv::Point pt0)
{
    double dx1 = pt1.x - pt0.x;
    double dy1 = pt1.y - pt0.y;
    double dx2 = pt2.x - pt0.x;
    double dy2 = pt2.y - pt0.y;
    return (dx1*dx2 + dy1*dy2)/sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2 + dy2*dy2) + 1e-10);
}

//寻找最大边框
int findLargestSquare(const vector<vector<cv::Point> >& squares, vector<cv::Point>& biggest_square)
{
    if (!squares.size()) return -1;

    int max_width = 0;
    int max_height = 0;
    int max_square_idx = 0;
    for (int i = 0; i < squares.size(); i++)
    {
        cv::Rect rectangle = boundingRect(Mat(squares[i]));
        if ((rectangle.width >= max_width) && (rectangle.height >= max_height))
        {
            max_width = rectangle.width;
            max_height = rectangle.height;
            max_square_idx = i;
        }
    }
    biggest_square = squares[max_square_idx];
    return max_square_idx;
}


int main(int argc, char *argv[])
{
    Mat src,dst,gray,binarization,open,dilate_img,gauss_img,edges_img;
   src = imread("/home/shangbinbin/opencv_linux_test/test3/5.jpg");
   //namedWindow("[原始图]", CV_WINDOW_NORMAL);
   //namedWindow("gauss", CV_WINDOW_NORMAL);
  //namedWindow("gray", CV_WINDOW_NORMAL);
  //imshow("[原始图]",src);
  cvtColor(src,gray,CV_BGR2GRAY);
  //imshow("gray",gray);
  GaussianBlur(gray,gauss_img,Size(3,3),2,2);
  //imshow("gauss",gauss_img);

  Canny(gauss_img,edges_img,50,150,3);
  namedWindow("edges", CV_WINDOW_NORMAL);
  imshow("edges",edges_img);
  dilate(edges_img, dilate_img, Mat(), cv::Point(-1, -1), 3, 1, 1);
  namedWindow("dilate", CV_WINDOW_NORMAL);
  imshow("dilate",dilate_img);
  vector<vector<cv::Point> > contours, squares, hulls;

  //寻找边框
  findContours(dilate_img, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);
  //绘制轮廓
  //drawContours(src,contours,-1,Scalar(255,0,0),1,8);
  //namedWindow("draw", CV_WINDOW_NORMAL);
  //imshow("draw",src);
  vector<cv::Point> hull, approx;
   for (int i = 0; i < contours.size(); i++)
   {
       //获得轮廓的凸包
       convexHull(contours[i], hull);
       //多边形拟合凸包边框(此时的拟合的精度较低)
       //arcLength得到轮廓的长度
      approxPolyDP(Mat(hull), approx, arcLength(Mat(hull), true)*0.02, true);
      //筛选出四边形的各个角度都接近直角的凸四边形
              if (approx.size() ==4 && isContourConvex(Mat(approx))&& fabs(contourArea(Mat(approx))) < 1166400)
              {
                  double maxCosine = 0;
                  for (int j = 2; j < 5; j++)
                  {
                      double cosine = fabs(getAngle(approx[j%4], approx[j-2], approx[j-1]));
                      maxCosine = MAX(maxCosine, cosine);
                  }
                      //角度大概72度
                  if (maxCosine < 0.4)
                  {
                      squares.push_back(approx);
                      hulls.push_back(hull);
                   }

               }
   }
   vector<cv::Point> largest_square;
   //找出外接矩形最大的四边形
   int idex = findLargestSquare(squares, largest_square);
   /* vector<vector<cv::Point> > temp;
    temp.push_back(squares[idex]);
    cout<<squares[idex][0]<<squares[idex][1]<<squares[idex][2]<<squares[idex][3]<<endl;
    drawContours(src,temp,-1,Scalar(255,0,0),3,8);
    namedWindow("draw", CV_WINDOW_NORMAL);
    imshow("draw",src);

*/
   cout<<squares[idex][0]<<squares[idex][1]<<squares[idex][2]<<squares[idex][3]<<endl;
   //画图
   for (int i = 0; i < 4; i++)
   {
                // circle(src,squares[idex][i],5,Scalar(0,0,255), 5);
       if(i<3)
       {
               line(src, squares[idex][i], squares[idex][i+1], Scalar(0,0,255), 5);
       }
       else
           line(src, squares[idex][3], squares[idex][0], Scalar(0,0,255), 5);
   }

   namedWindow("draw", CV_WINDOW_NORMAL);
   imshow("draw",src);

//得到图片的高度和宽度
   int width = src.cols;
   int height = src.rows;

   vector<Point2f> src_corners(4);
       src_corners[0] = squares[idex][3]; // 提取出来的轮廓的4个点
       src_corners[1] = squares[idex][0];
       src_corners[2] = squares[idex][2];
       src_corners[3] = squares[idex][1];

       vector<Point2f> dst_corners(4);
       dst_corners[0] = Point(0, 0); // 原图中4个点到图像的宽高上 的透视变换关系
       dst_corners[1] = Point(width, 0);
       dst_corners[2] = Point(0, height);
       dst_corners[3] = Point(width, height);

       // 获取透视变换矩阵
       Mat resultImage;
       Mat warpmatrix = getPerspectiveTransform(src_corners, dst_corners); // 获取上述关系的透视变换矩阵
       warpPerspective(src, resultImage, warpmatrix, resultImage.size(), INTER_LINEAR); // 透视变换
       namedWindow("Final Result", CV_WINDOW_NORMAL);
       imshow("Final Result", resultImage);







   waitKey(0);
   return 0;
}

